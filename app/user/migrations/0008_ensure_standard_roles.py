# Generated by Django 5.2.6 on 2025-09-18 16:30

from django.db import migrations


def create_standard_roles(apps, schema_editor):
    """Create standard roles with appropriate permissions"""
    Role = apps.get_model('user', 'Role')
    
    # Define standard roles with their permissions
    standard_roles = [
        {
            'name': 'Administrator',
            'description': 'Full administrative access to the system',
            'permissions': {
                'permissions': [
                    'user.create',
                    'user.edit',
                    'user.delete',
                    'user.view',
                    'user.manage',
                    'dataset.create',
                    'dataset.edit',
                    'dataset.delete',
                    'dataset.view',
                    'dataset.publish',
                    'project.create',
                    'project.edit',
                    'project.delete',
                    'project.view',
                    'project.manage',
                    'role.create',
                    'role.edit',
                    'role.delete',
                    'role.view',
                ]
            },
            'is_active': True
        },
        {
            'name': 'Editor',
            'description': 'Can create, edit and manage datasets and projects',
            'permissions': {
                'permissions': [
                    'dataset.create',
                    'dataset.edit',
                    'dataset.view',
                    'dataset.publish',
                    'project.create',
                    'project.edit',
                    'project.view',
                    'user.view',
                ]
            },
            'is_active': True
        },
        {
            'name': 'Viewer',
            'description': 'Read-only access to datasets and projects',
            'permissions': {
                'permissions': [
                    'dataset.view',
                    'project.view',
                    'user.view',
                ]
            },
            'is_active': True
        }
    ]
    
    # Create or update roles
    for role_data in standard_roles:
        role, created = Role.objects.get_or_create(
            name=role_data['name'],
            defaults={
                'description': role_data['description'],
                'permissions': role_data['permissions'],
                'is_active': role_data['is_active']
            }
        )
        
        if not created:
            # Update existing role with new permissions if they're empty
            if not role.permissions or not role.permissions.get('permissions'):
                role.description = role_data['description']
                role.permissions = role_data['permissions']
                role.is_active = role_data['is_active']
                role.save()
                print(f"Updated role: {role.name}")
            else:
                print(f"Role already exists with permissions: {role.name}")
        else:
            print(f"Created new role: {role.name}")


def reverse_create_standard_roles(apps, schema_editor):
    """Remove standard roles (optional - usually not recommended)"""
    Role = apps.get_model('user', 'Role')
    standard_role_names = ['Administrator', 'Editor', 'Viewer']
    
    for role_name in standard_role_names:
        try:
            role = Role.objects.get(name=role_name)
            role.delete()
            print(f"Removed role: {role_name}")
        except Role.DoesNotExist:
            print(f"Role not found: {role_name}")


class Migration(migrations.Migration):

    dependencies = [
        ('user', '0007_customuser_notify_comments_and_more'),
    ]

    operations = [
        migrations.RunPython(
            create_standard_roles,
            reverse_create_standard_roles,
        ),
    ]
